pipeline
    {
    agent any
    
    environment 
    {
    
        AWS_ACCESS_KEY_ID = credentials('aws-jenkins-creds')
        
        AWS_SECRET_ACCESS_KEY = credentials('aws-jenkins-creds')
        
        region = "ap-south-1"
        
        VERSION = "${env.BUILD_ID}-${env.GIT_COMMIT}"
        
        docker_repo_uri = "774305604464.dkr.ecr.ap-south-1.amazonaws.com/flask-app"
       
        task_def_arn = "arn:aws:ecs:ap-south-1:774305604464:task-definition/TASKDEFINITION-flask:1"
        
        cluster = "JEN-ECS"
        
        exec_role_arn = "arn:aws:iam::774305604464:role/ecsTaskExecutionRole"
        
        TASK_DEFINITION_NAME = "TASKDEFINITION-flask"
  
        SERVICE_NAME = "JEN-SERVICE"
    }
    stages
    {
    stage('Build')
    {
    steps {
        // Get SHA1 of current commit
        script {
            commit_id = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
        }
        // Build the Docker image
        sh "docker build -t ${docker_repo_uri}:${VERSION} ."
        // Get Docker login credentials for ECR
        // sh "aws ecr get-login --no-include-email --region ${region} | sh"
        sh "aws ecr get-login-password --region ${region} | docker login --username AWS --password-stdin ${docker_repo_uri}:${VERSION}"
        // Push Docker image
        sh "docker push ${docker_repo_uri}:${VERSION}"
        // Clean up
        sh "docker rmi -f ${docker_repo_uri}:${VERSION}"
        }
    }
    stage('deploy')
    {
    steps{
        // Get SHA1 of current commit
        script {
            commit_id = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
        }
        // Deploy to ECS
        sh ''' echo "${docker_repo_uri}:${VERSION}"
TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "$TASK_DEFINITION_NAME" --region "${region}")
NEW_CONTAINER_DEFINTIION=$(echo $TASK_DEFINITION | jq --arg IMAGE "${docker_repo_uri}:${VERSION}" \'.taskDefinition.containerDefinitions[0].image = $IMAGE | .taskDefinition.containerDefinitions[0]\')
echo "Registering new container definition..."
aws ecs register-task-definition --region "${region}" --family "${TASK_DEFINITION_NAME}" --requires-compatibilities FARGATE --cpu 512 --memory 1024 --network-mode "awsvpc" --execution-role-arn "${exec_role_arn}" --container-definitions "${NEW_CONTAINER_DEFINTIION}" 
echo "Updating the service..."
aws ecs update-service --region "${region}" --cluster "${cluster}" --service "${SERVICE_NAME}"  --task-definition "${TASK_DEFINITION_NAME}" '''
    }    
    }
    }
   }
